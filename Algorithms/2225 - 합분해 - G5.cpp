/*
	N = 1, K = 1
		1
	N = 2, K = 1
		2					
							=> dp[i][1] = 1
	N = 1, K = 2
		0, 1 / 1, 0			=> dp[1][1] + 1	
	N = 2, K = 2
		0, 2 / 2, 0
		1, 1				=> dp[1][1] + dp[2][1] + 1
	N = 3, K = 2
		0, 3 / 3, 0
		1, 2 / 2, 1			=> dp[1][1] + dp[2][1] + dp[3][1] + 1
	N = 4, K = 2
		0, 4 / 4, 0
		1, 3 / 2, 2 / 3, 1	=> dp[1][1] + dp[2][1] + dp[3][1] + dp[4][1] + 1

	N = 1, K = 3
		1, 0, 0 / 0, 1, 0 / 0, 0, 1
							=> dp[1][2] + 1
	N = 2, K = 3
		2, 0, 0 / 0, 2, 0 / 0, 0, 2
		0, 1, 1 / 1, 0, 1
		1, 1, 0
							=> dp[1][2] + dp[2][2] + 1
	N = 3, K = 3
		0, 0, 3 / 0, 3, 0 / 3, 0, 0
		0, 1, 2 / 1, 0, 2 / 0, 2, 1 / 2, 0, 1 / 1, 1, 1
		2, 1, 0 / 1, 2, 0
							=> dp[1][2] + dp[2][2] + dp[3][2] + 1
	=> ¡Ô, dp[i][j] = dp[1...i][j - 1] + 1
*/

#include <cstdio>
#define MOD 1000000000
using namespace std;

int dp[201][201];

int main() {
	int N, K;
	scanf("%d %d", &N, &K);

	for (int i = 1; i <= N; i++)
		dp[i][1] = 1;

	for (int i = 1; i <= N; i++) {
		for (int j = 2; j <= K; j++) {
			for (int k = 1; k <= i; k++) {
				dp[i][j] = (dp[i][j] + dp[k][j - 1]) % MOD;
			}
			dp[i][j] = (dp[i][j] + 1) % MOD;
		}
	}
	printf("%d", dp[N][K]);
}