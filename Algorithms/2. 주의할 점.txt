보통 1억번 정도가 1초다.

* 그래프
	3197
		BFS 시간을 줄이는 방법
		이전 탐색에서 이어나가기.
	2644
		1. BFS에서 깊이를 찾을 때, queue의 pop 횟수를 세는 일이 없도록 하자!
		2. 이건 깊이랑 상관이 없다!
		
	

* 예외
	1. 예외 상황 찾을 때, 0을 주의하라!
	2. 숫자의 크고 작음을 다룰 때, vector의 처음과 마지막에 어떤 수를 넣고 계산하는 방법!
	   arr[i]와 arr[i + 1] 혹은 arr[i - 1]을 비교할 때 사용할 수 있다.
	   if (arr[i] != arr[i + 1])과 else로 나눠져 있는 경우,
	   마지막 꺼는 else 때의 연산이 필요하더라도 for문 때문에 넘어가는 경우가 생길 수 있다.

	7569
		1. struct tomato에서 선언된 변수 x, y, z 를 순서에 맞게 사용해야 한다.
		2. 저장된 깊이 값을 출력할 때, 그 값이 실제 깊이인 지 체크해봐야 한다.
		3. 토마토가 하나도 없는 경우. 즉 예외 경우를 잘 생각해보기
			이건 깊이를 체크할 때, -1 하는 것 때문에 생긴 문제인 듯.
			값을 변형해서 return 할 때는, 예외의 상황. 즉 0일 때의 값 같은 걸 생각해보자.

* 입출력 형식 주의
	14503	입력값 형태 주목!
	13460	입력값 문제에서 그대로 가져오자. 시발... O, O, 0 시발... 이 세개 똑같이 생긴거 실화냐.
	2667	입력값 형태 주목! 문자열 형태로 입력이 들어올 수도 있다!
	11724	입력값 형태 주목! 배열 숫자를 안헷갈리게 그냥 맞추자.

* 발상의 전환
	1016	제곱수에 의해 나눠지지 않는 수들을 구하는 문제.
			처음에는 에라토스테네스의 체로 소수들을 구해서, 소수의 제곱에 의해 나눠지는 수들을 배제하는 방식을 썼다.
			하지만, [MIN, MAX]의 모든 수들을 [2, 1000000] 까지의 모든 소수의 제곱으로 나눠보는 것은 시간초과 발생
			그래서, 제곱으로 나눠지는 것이 아닌, 애초부터 [2, 1000000]의 제곱을 배제하는 방식을 사용.
			이때, MIN부터 체킹이 들어갈 필요가 있으므로, start = MIN / (i * i) 후, start가 MIN과 같으면 그대로, 아니면 ++해주었다.

* 인접리스트
	5430
		보통 배열의 맨 앞 원소를 무작정 지워서는 안 됩니다.
		C++의 vector::erase(), Java의 ArrayList.remove(), Python의 list.pop() 등으로
		배열의 첫 번째 원소를 지울 시, 그 뒤에 있는 모든 원소들을 전부 한 칸씩 앞으로
		당겨오게 되므로, 그 시간 역시 원소의 수에 비례하여 소요됩니다.